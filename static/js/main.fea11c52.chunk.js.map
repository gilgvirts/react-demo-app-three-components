{"version":3,"sources":["components/FormComponent/Form.js","components/SimpleTabs/Tabs.js","components/DisplayComponent/Display.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","setName","name","setAge","age","className","type","placeholder","value","onChange","target","parseInt","Tabs","marked","setMarked","disabled","onClick","defaultProps","Display","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPA4BeA,MAzBf,SAAcC,GAAO,IACVC,EAA8BD,EAA9BC,QAASC,EAAqBF,EAArBE,KAAMC,EAAeH,EAAfG,OAAQC,EAAOJ,EAAPI,IAC9B,OACI,yBAAKC,UAAU,QACZ,4CACA,2BAAOC,KAAK,OACZC,YAAY,UACZC,MAAON,EACPO,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAYT,EAAQS,EAAOF,UAErC,2CACA,2BAAOF,KAAK,SACZE,MAAOJ,EACPK,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAYP,EAAOQ,SAASD,EAAOF,aCbxD,SAASI,EAAKZ,GAAO,IACVa,EAAqBb,EAArBa,OAAQC,EAAad,EAAbc,UACf,OACI,yBAAKT,UAAU,QACZ,4BAAQU,SAAqB,IAAXF,EAAcG,QAAS,kBAAIF,EAAU,KAAvD,YACA,4BAAQC,SAAqB,IAAXF,EAAcG,QAAS,kBAAIF,EAAU,KAAvD,gBAIXF,EAAKK,aAAe,CAChBJ,OAAO,GAOID,QCFAM,MAff,SAAiBlB,GAAO,IACbE,EAAaF,EAAbE,KAAME,EAAOJ,EAAPI,IACb,OACI,yBAAKC,UAAU,WACZ,qCAAWH,EAAX,KACA,4BAAKE,EAAL,oBCWIe,MAbf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNlB,EADM,KACAD,EADA,OAESmB,mBAAS,GAFlB,mBAENhB,EAFM,KAEDD,EAFC,OAGeiB,mBAAS,GAHxB,mBAGNP,EAHM,KAGEC,EAHF,KAIb,OACE,yBAAKT,UAAU,cACb,kBAAC,EAAD,CAAMQ,OAAQA,EAAQC,UAAWA,IACrB,IAAXD,GAAiB,kBAAC,EAAD,CAAOX,KAAMA,EAAME,IAAKA,EAAKD,OAAQA,EAAQF,QAASA,IAC5D,IAAXY,GAAgB,kBAAC,EAAD,CAASX,KAAMA,EAAME,IAAKA,MCF7BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fea11c52.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../App.css';\r\nfunction Form(props){\r\n    const {setName, name, setAge, age} = props\r\n    return (\r\n        <div className=\"Form\">\r\n           <h2>Insert Name:</h2>\r\n           <input type=\"text\" \r\n           placeholder=\"Name...\" \r\n           value={name} \r\n           onChange={({target})=>setName(target.value)}/>\r\n           \r\n           <h2>Insert Age:</h2> \r\n           <input type=\"number\" \r\n           value={age} \r\n           onChange={({target})=>setAge(parseInt(target.value))}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nForm.propTypes = {\r\n    setName:PropTypes.func.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    setAge:PropTypes.func.isRequired,\r\n    age:PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../App.css';\r\nfunction Tabs(props){\r\n    const {marked, setMarked} = props\r\n    return (\r\n        <div className=\"Tabs\">\r\n           <button disabled={marked === 0} onClick={()=>setMarked(0)}>Form Tab</button>\r\n           <button disabled={marked === 1} onClick={()=>setMarked(1)}>Display Tab</button>\r\n        </div>\r\n    );\r\n};\r\nTabs.defaultProps = {\r\n    marked:0\r\n}\r\nTabs.propTypes = {\r\n    setMarked:PropTypes.func.isRequired,\r\n    marked:PropTypes.number,\r\n}\r\n\r\nexport default Tabs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../App.css';\r\nfunction Display(props){\r\n    const {name, age} = props\r\n    return (\r\n        <div className=\"Display\">\r\n           <h2>Hello {name}!</h2>\r\n           <h2>{age} is a fun age!</h2> \r\n        </div>\r\n    );\r\n};\r\n\r\nDisplay.propTypes = {\r\n    name:PropTypes.string.isRequired,\r\n    age:PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Display;","import React,{useState} from 'react';\nimport '../../App.css';\nimport Form from '../FormComponent'\nimport Tabs from \"../SimpleTabs\"\nimport Display from '../DisplayComponent'\n\nfunction App() {\n  const [name, setName] = useState(\"\")\n  const [age, setAge] = useState(0)\n  const [marked, setMarked] = useState(0)\n  return (\n    <div className=\"App-header\">\n      <Tabs marked={marked} setMarked={setMarked}/>\n      {marked === 0  && <Form  name={name} age={age} setAge={setAge} setName={setName}/>}\n      {marked === 1 && <Display name={name} age={age}/>}  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}